import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt

# (1) Systematic and Random Error Definitions
# Systematic error can be accounted for if known, otherwise treated as random error in practical cases.
def calculate_systematic_error(true_value, measured_value):
    """Systematic error: deviation from the true value."""
    return true_value - measured_value

# Random error estimation using Gaussian distribution for repeated measurements
def random_error_estimation(measurements):
    """Estimates the random error (standard deviation) for a set of measurements."""
    mean = np.mean(measurements)
    std_dev = np.std(measurements)
    return mean, std_dev

# (2) Calculating and Describing Random Error and Probability Error
def confidence_interval(mean, std_dev, sample_size, confidence_level=0.95):
    """Calculates the confidence interval for random error."""
    t_value = stats.t.ppf((1 + confidence_level) / 2, df=sample_size - 1)
    margin_of_error = t_value * (std_dev / np.sqrt(sample_size))
    return mean - margin_of_error, mean + margin_of_error

# (3) Propagation of Uncertainty (Error)
def propagate_uncertainty(formula, uncertainties, *variables):
    """Propagates uncertainty through a formula with given uncertainties in the variables."""
    uncertainty_result = np.sqrt(sum((uncertainty * derivative) ** 2 for uncertainty, derivative in zip(uncertainties, formula(*variables))))
    return uncertainty_result

# Example: Volume of a cylinder (V = π * r^2 * h)
def cylinder_volume(r, h):
    """Calculates the volume of a cylinder."""
    return np.pi * r**2 * h

# Derivatives of the volume formula with respect to r and h
def volume_derivatives(r, h):
    """Returns the derivatives of volume with respect to r and h."""
    dV_dr = 2 * np.pi * r * h
    dV_dh = np.pi * r**2
    return dV_dr, dV_dh

# (4) Least Squares Method for Linear Regression
def least_squares(x, y):
    """Performs linear regression and returns the slope, intercept, and uncertainties."""
    A = np.vstack([x, np.ones_like(x)]).T
    m, c = np.linalg.lstsq(A, y, rcond=None)[0]
    
    residuals = y - (m * x + c)
    residual_sum_of_squares = np.sum(residuals**2)
    standard_error_m = np.sqrt(residual_sum_of_squares / (len(x) - 2)) / np.sqrt(np.sum((x - np.mean(x))**2))
    standard_error_c = standard_error_m * np.sqrt(np.mean(x**2))
    
    return m, c, standard_error_m, standard_error_c

# (5) Reading Vernier Calipers
def vernier_reading(main_scale, vernier_scale, vernier_precision=0.02):
    """Calculates the total reading using both main scale and vernier scale."""
    return main_scale + vernier_scale * vernier_precision

# Example data for measurements
measurements = np.array([10.2, 10.4, 10.1, 10.3, 10.5])
true_value = 10.3

# (1) Systematic Error
systematic_error = calculate_systematic_error(true_value, np.mean(measurements))

# (2) Random Error Estimation
mean, std_dev = random_error_estimation(measurements)

# (2) Confidence Interval for 95% confidence level
ci_lower, ci_upper = confidence_interval(mean, std_dev, len(measurements), confidence_level=0.95)

# (3) Propagation of Uncertainty (Volume of Cylinder)
r = 2.5  # radius in cm
h = 10.0  # height in cm
uncertainty_r = 0.1  # uncertainty in radius in cm
uncertainty_h = 0.2  # uncertainty in height in cm
volume = cylinder_volume(r, h)
uncertainty_in_volume = propagate_uncertainty(volume_derivatives, [uncertainty_r, uncertainty_h], r, h)

# (4) Least Squares Regression
x_data = np.array([1, 2, 3, 4, 5])
y_data = np.array([2.3, 3.1, 4.0, 4.8, 6.0])
slope, intercept, error_slope, error_intercept = least_squares(x_data, y_data)

# (5) Vernier Caliper Measurement
main_scale = 3.8  # in cm
vernier_scale = 0.8  # in mm
vernier_precision = 0.02  # mm per vernier scale reading
vernier_measurement = vernier_reading(main_scale, vernier_scale, vernier_precision)

# Output Results
print(f"Systematic Error: {systematic_error:.2f} cm")
print(f"Random Error (Standard Deviation): {std_dev:.3f} cm")
print(f"Confidence Interval (95%): ({ci_lower:.3f}, {ci_upper:.3f}) cm")
print(f"Cylinder Volume: {volume:.2f} cm³")
print(f"Uncertainty in Volume: {uncertainty_in_volume:.3f} cm³")
print(f"Linear Regression - Slope: {slope:.3f}, Intercept: {intercept:.3f}")
print(f"Linear Regression - Slope Uncertainty: {error_slope:.3f}, Intercept Uncertainty: {error_intercept:.3f}")
print(f"Vernier Measurement: {vernier_measurement:.2f} cm")

# Plot for Least Squares Regression
plt.scatter(x_data, y_data, color='blue', label='Data')
plt.plot(x_data, slope * x_data + intercept, color='red', label='Best Fit Line')
plt.xlabel('X Data')
plt.ylabel('Y Data')
plt.legend()
plt.show()

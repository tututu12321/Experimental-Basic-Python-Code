import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Define the model function for gravitational acceleration g
def model(theta, T, h1, r):
    return (4 * np.pi**2 / T**2) * (h1 + (2 * r**2) / (5 * h1)) * (1 + (theta**2) / 8)

# Example data (replace these with your actual data)
# Angle data (theta in radians)
theta_data = np.array([0.1, 0.2, 0.3, 0.4, 0.5])  # Example values for theta
# Gravitational acceleration data (g in m/s^2)
g_data = np.array([9.8, 9.9, 10.0, 10.1, 10.2])  # Example values for g
# Period (T), height (h1), and radius (r) data
T = 2  # Example value for the period T in seconds
h1 = 1  # Example value for the height h1 in meters
r = 0.5  # Example value for the radius r in meters

# Fit the model to the data
popt, pcov = curve_fit(lambda theta, T, h1, r: model(theta, T, h1, r), theta_data, g_data, p0=[T, h1, r])

# Extract the fitted parameters
T_fitted, h1_fitted, r_fitted = popt

# Generate a range of theta values for plotting the fitted curve
theta_fit = np.linspace(min(theta_data), max(theta_data), 100)
g_fit = model(theta_fit, T_fitted, h1_fitted, r_fitted)

# Plot the data and the fitted curve
plt.scatter(theta_data, g_data, color='red', label='Measured Data')
plt.plot(theta_fit, g_fit, color='blue', label=f'Fitted Model: $g = \\frac{{4\\pi^2}}{{T^2}}(h_1 + \\frac{{2r^2}}{{5h_1}})(1 + \\frac{{\\theta^2}}{{8}})$')
plt.xlabel('Angle (θ) [radians]')
plt.ylabel('Gravitational Acceleration g [m/s²]')
plt.title('Fitting Gravitational Acceleration vs Angle θ')
plt.legend()
plt.grid(True)
plt.show()

# Print the fitted parameters
print(f"Fitted Parameters:")
print(f"T = {T_fitted:.2f} s")
print(f"h1 = {h1_fitted:.2f} m")
print(f"r = {r_fitted:.2f} m")
